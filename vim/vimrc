call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'mileszs/ack.vim'
Plug 'easymotion/vim-easymotion'
Plug 'Shougo/echodoc.vim'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'skywind3000/asyncrun.vim'
Plug 'vim-scripts/vim-auto-save', { 'for': ['h','hpp', 'c', 'cpp'] }
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'



"SirVer/ultisnips 

call plug#end()

let mapleader=";"
"Ack
map <C-f> :Ack<space>

"asyncrun
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>

"NERDTree
map <silent> <C-e> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$','\.so$','\.zip$','\.tar.gz$','\.tar.xz$','\.tar.bz2$','\.a$']
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeChDirMode = 2

"LeaderF
"LeaderfFunction 的浏览模式中，按 i 进入模糊匹配模式（按 TAB切换回来）
map <silent> <C-B> :LeaderfFunction!<CR>
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0}
map <leader>b :LeaderfFunction!<CR>

"coc
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gf :call CocAction('format')<cr>:w<cr>
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
nnoremap <silent> <C-T> :<C-u>CocList -I symbols<cr>
nnoremap <silent> <leader>t :<C-u>CocList -I symbols<cr>

"NERDCommenter
map  <silent> <C-_> <Plug>NERDCommenterToggle
imap <silent> <C-_> <ESC><Plug>NERDCommenterToggle

"AsyncRun
let g:asyncrun_open = 6
nnoremap <silent> <F10> :call asyncrun#quickfix_toggle(6)<cr>
nnoremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT).out" <cr>
autocmd FileType c nnoremap <silent> <F7> :AsyncRun gcc -g3 -ggdb3 -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT).out" <cr>
autocmd FileType cpp nnoremap <silent> <F7> :AsyncRun g++ -std=c++11 -g3 -ggdb3 -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT).out" <cr>

"EasyMotion
let g:EasyMotion_do_mapping = 0 
let g:EasyMotion_smartcase = 1
nmap f <Plug>(easymotion-overwin-f2)

"Shougo/echodoc.vim
let g:echodoc_enable_at_startup = 1
set cmdheight=2
"set noshowmode


"vim-auto-save
let g:auto_save = 1
let g:auto_save_no_updatetime = 0
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1

"窗口切换
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h

set backspace=indent,eol,start
syntax on
set nocompatible
set autoindent
set cindent
set ruler
set hlsearch
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.tar.bz2,*.tar.gz,*.gz,*.tar.xz

"保存时检查php文件的语法
autocmd BufWritePost *.php call PHPSyntaxCheck()

if !exists('g:PHP_SYNTAX_CHECK_BIN')
    let g:PHP_SYNTAX_CHECK_BIN = 'php'
endif

function! PHPSyntaxCheck()
    let result = system(g:PHP_SYNTAX_CHECK_BIN.' -l -n '.expand('%'))
    if (stridx(result, 'No syntax errors detected') == -1)
        echohl WarningMsg | echo result | echohl None
    endif
endfunction

"保存和退出
map wq <ESC><ESC>:wq<CR>
map qq <ESC><ESC>:q!<CR>
map <F11> <ESC>:set invpaste<CR>

