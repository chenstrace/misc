#!/usr/bin/expect

proc ini2dict { filepath {separator =}} {
    if {$filepath == ""} {
         return ""
    }

    if {![file exists $filepath] || [catch { set fh [open $filepath r] } ] } {
         return ""
    }

    while {![chan eof $fh]} {
        gets $fh line

        if { [string length $line] < 2 } {
             continue
        }

        if { [regexp {^[[:blank:]]*\[{1}.*\]{1}} $line sect] } {
            set sect [string range $sect 1 end-1]
            continue
        }

         set seppoint [string first $separator $line]
         if { [string length $sect] && $seppoint > 1 } {
             set key_tmp [string range $line 0 [expr { $seppoint - 1 }]]
             set value_tmp [string range $line [expr { $seppoint + 1}] end ]
             set key [string trim $key_tmp]
             set value [string trim $value_tmp]
             dict set dic $sect $key $value
         }
    }

    close $fh
    return $dic
}

proc is_valid_item {item} {
    set host_exist [dict exists $item host]
    set port_exist [dict exists $item port]
    set username_exist [dict exists $item username]
    set password_exist [dict exists $item password]

    if { $host_exist == 0 } {
	return 0	
    }

    if { $port_exist == 0 } {
	return 0	
    }

    if { $username_exist == 0 } {
	return 0	
    }

    if { $password_exist == 0 } {
	return 0	
    }
 
    return 1
}

proc is_hide_item {item} {
    set hide 0
    set hide_exist [dict exists $item hide]
    
    if { $hide_exist == 1 } {
        set hide [dict get $item hide]
    }

    if { $hide != 0 } {
	return 1
    }
    return 0
}

proc check {argc} {
    if { $argc != 0 && $argc != 1 } {
       return 0
    }
    return 1
}

proc get_config_path {argc argv} {
    #默认使用~/ssh.ini
    set config_file ~/ssh.ini

    if { $argc == 0 } {
        return $config_file
    }
	
    if { $argc == 1 } {
	set config_file [ lindex $argv 0 ]
    }
	
    if { [file exists $config_file] == 0 } { 
	return ""
    }

    return $config_file
}

proc get_config_dict { file_path } {
    #读取ini文件，形成dict
    set config_dict [ini2dict $file_path]

    #获取dict的长度
    set dict_size [dict size $config_dict]

    #如果dict的长度小于等于0，说明配置文件不合理
    if { $dict_size <= 0 } { 
        return ""
    }
    return $config_dict
}

if { [check $argc] == 0 } {
    puts "usage: $argv0" 
    puts "usage: $argv0 config_file" 
    exit
}

set config_file [ get_config_path $argc $argv ]
set config_dict [ get_config_dict $config_file ]

if { $config_dict == "" } {
    puts "config file error, please check"
    exit
}

set index 1
set prompt "please choose your number\n"
set choices [dict create]
foreach key [dict keys $config_dict] {
    set value [dict get $config_dict $key]

    set hide [is_hide_item $value]
    if { $hide == 1 } {
	continue
    } 
    
    set valid [is_valid_item $value]
    if { $valid != 1 } {
	continue
    }

    set desc ""
    if { [dict exist $value desc] } {
	set desc [dict get $value desc]
    } 

    set host [dict get $value host]
    set desc [dict get $value desc]
    set item_string "$index: $host $desc\n";
    append prompt $item_string
    dict set choices $index $value

    incr index
}

if { $index == 1 } {
    puts "No available host\n"
    exit
}


send_user $prompt
expect_user -re "(.*)\n"
set number $expect_out(1,string)
if { [dict exist $choices $number] == 0 } {
    puts "your choice is wrong\n"
    exit
} 



set jump_host [dict get $config_dict jump host]
set jump_port [dict get $config_dict jump port]
set jump_username [dict get $config_dict jump username]
set jump_password [dict get $config_dict jump password]

set host [dict get $choices $number host]
set port [dict get $choices $number port]
set username [dict get $choices $number username]
set password [dict get $choices $number password]

spawn ssh $jump_username@$jump_host -p $jump_port

expect {
    "*(yes/no)?" { send "yes\n";exp_continue}
    "$jump_username@relay*" { send "$jump_password\n"}
    "*ssl*" { send "ssh -o StrictHostKeyChecking=no $username@$host -p $port\n";exp_continue}
    "password:" { send "$password\n";interact;exit}
}

expect {
    "*ssl*" { send "ssh -o StrictHostKeyChecking=no $username@$host -p $port\n"}
}

expect {
    "password:" { send "$password\n"}
}

interact
